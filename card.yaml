Visa: 4242 4242 4242 4242
Mastercard: 5555 5555 5555 4444
American Express: 3782 8224 6310 005
Discover: 6011 0009 9013 9424
JCB: 3530 1113 3330 0000

###############################################
card_number: 4242424242424242
exp_month: 12
exp_year: 2024


# func handler(w http.ResponseWriter, r *http.Request) {
#     // Allow all origins for CORS
#     w.Header().Set("Access-Control-Allow-Origin", "http://127.0.0.1:5501") // Set the correct origin for your frontend
#     w.Header().Set("Access-Control-Allow-Methods", "POST, OPTIONS")
#     w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
#     w.Header().Set("Access-Control-Allow-Credentials", "true")

#     if r.Method == http.MethodOptions {
#         w.WriteHeader(http.StatusNoContent)
#         return
#     }

#     // Handle actual POST requests
#     if r.Method == http.MethodPost {
#         var creditCardReq CreditCardRequest
#         // Decode the JSON data from the request body directly using json.Unmarshal
#         if err := json.NewDecoder(r.Body).Decode(&creditCardReq); err != nil {
#             // If there's an error decoding JSON, respond with a 400 Bad Request status
#             http.Error(w, "Error decoding JSON", http.StatusBadRequest)
#             return
#         }

#         valid, err := validateCreditCard(creditCardReq.CardNumber, creditCardReq.ExpMonth, creditCardReq.ExpYear)
#         if err != nil {
#             http.Error(w, "Error validating credit card", http.StatusInternalServerError)
#             return
#         }

#         response := map[string]bool{"valid": valid}
#         writeJSONResponse(w, http.StatusOK, response)
#         return
#     }

#     http.Error(w, "Method Not Allowed", http.StatusMethodNotAllowed)
# }